/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coffee;

import Models.Cashier;
import Models.Invoice;
import Models.Sale;
import Services.AccountManager;
import Services.OrderManager;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
    import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author barri
 */
public class coffeeshop extends javax.swing.JFrame {
    // Initial declarations
    ArrayList<Sale> sales = new ArrayList<>();
    private Cashier operatingCashier;
    private int itemID = 1;
    private int invoiceID = 1;
    private int cashierID = 1;
    private double cash = 0.0
            , subTotal = 0.0
            , tax = 0.0
            , total = 0.0
            , change = 0.0;
    
    /**
     * Creates new form coffeeshop
     */
    public coffeeshop(Cashier operatingCashier) {
        initComponents();
        this.operatingCashier = operatingCashier;
    }
  
    public void resetToZero(){
        americano.clearSelection();
        jSpinnerAmericano.setValue(1);
        americanoPrice.setText("");
               
        cappucino.clearSelection();
        jSpinnerCappucino.setValue(1);
        cappucinoPrice.setText("");
        
        latte.clearSelection();
        jSpinnerLatte.setValue(1);
        lattePrice.setText("");
        
        hazelnut.clearSelection();
        jSpinnerHazelnut.setValue(1);
        hazelnutPrice.setText("");
        
        chocoChip.clearSelection();
        jSpinnerChocoChip.setValue(1);
        chocoChipPrice.setText("");
        
        cookiesNCream.clearSelection();
        jSpinnerCookiesNCream.setValue(1);
        cookiesNCreamPrice.setText("");
        
        whiteMocha.clearSelection();
        jSpinnerWhiteMocha.setValue(1);
        whiteMochaPrice.setText("");
        
        toffeeNut.clearSelection();
        jSpinnerToffeeNut.setValue(1);
        toffeeNutPrice.setText("");
        
        darkChoco.clearSelection();
        jSpinnerDarkChoco.setValue(1);
        darkChocoPrice.setText("");
        
        jSpinnerPainAuChocolat.setValue(1);
        jSpinnerMacaron.setValue(1);    
        jSpinnerBlueberryCheesecake.setValue(1);
        
        cashTextFld.setText("0.0");
        subTotalTextFld.setText("0.0");
        taxTextFld.setText("0.0");
        totalTextFld.setText("0.0");
        changeTextFld.setText("0.0");
                
        Cashier operatingCashier;
        itemID = 1;
        invoiceID = 1;
        cashierID = 1;
        cash = 0.0;
        subTotal = 0.0;
        tax = 0.0;
        total = 0.0;
        change = 0.0;
        
        sales.clear();
        DefaultTableModel model = (DefaultTableModel) orderListTbl.getModel();
        model.setRowCount(0);
        invoiceTextArea.setText("");
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        americano = new javax.swing.ButtonGroup();
        cappucino = new javax.swing.ButtonGroup();
        latte = new javax.swing.ButtonGroup();
        hazelnut = new javax.swing.ButtonGroup();
        chocoChip = new javax.swing.ButtonGroup();
        whiteMocha = new javax.swing.ButtonGroup();
        toffeeNut = new javax.swing.ButtonGroup();
        darkChoco = new javax.swing.ButtonGroup();
        cookiesNCream = new javax.swing.ButtonGroup();
        shopNamePnl = new javax.swing.JPanel();
        shopNameLbl = new javax.swing.JLabel();
        menuItemsPnl = new javax.swing.JPanel();
        menuItemsLbl = new javax.swing.JLabel();
        coffeeLbl = new javax.swing.JLabel();
        americanoPanel = new javax.swing.JPanel();
        jSpinnerAmericano = new javax.swing.JSpinner();
        americanoPriceLbl = new javax.swing.JLabel();
        americanoQtyLbl = new javax.swing.JLabel();
        americanoSizeLbl = new javax.swing.JLabel();
        americanoPrice = new javax.swing.JTextField();
        mdAmericano = new javax.swing.JRadioButton();
        smAmericano = new javax.swing.JRadioButton();
        lgAmericano = new javax.swing.JRadioButton();
        americanoHeader = new javax.swing.JLabel();
        americanoPurchase = new javax.swing.JButton();
        cappucinoPanel = new javax.swing.JPanel();
        jSpinnerCappucino = new javax.swing.JSpinner();
        cappucinoPriceLbl = new javax.swing.JLabel();
        cappucinoQtyLbl = new javax.swing.JLabel();
        cappucinoSizeLbl = new javax.swing.JLabel();
        cappucinoPrice = new javax.swing.JTextField();
        mdCappucino = new javax.swing.JRadioButton();
        smCappucino = new javax.swing.JRadioButton();
        lgCappucino = new javax.swing.JRadioButton();
        cappucinoHeader = new javax.swing.JLabel();
        cappucinoPurchase = new javax.swing.JButton();
        lattePanel = new javax.swing.JPanel();
        jSpinnerLatte = new javax.swing.JSpinner();
        lattePriceLbl = new javax.swing.JLabel();
        latteQtyLbl = new javax.swing.JLabel();
        latteSizeLbl = new javax.swing.JLabel();
        lattePrice = new javax.swing.JTextField();
        mdLatte = new javax.swing.JRadioButton();
        smLatte = new javax.swing.JRadioButton();
        lgLatte = new javax.swing.JRadioButton();
        latteHeader = new javax.swing.JLabel();
        lattePurchase = new javax.swing.JButton();
        iceBlendedLbl = new javax.swing.JLabel();
        hazelnutPanel = new javax.swing.JPanel();
        jSpinnerHazelnut = new javax.swing.JSpinner();
        hazelnutPriceLbl = new javax.swing.JLabel();
        hazelnutQtyLbl = new javax.swing.JLabel();
        hazelnutSizeLbl = new javax.swing.JLabel();
        hazelnutPrice = new javax.swing.JTextField();
        mdHazelnut = new javax.swing.JRadioButton();
        smHazelnut = new javax.swing.JRadioButton();
        lgHazelnut = new javax.swing.JRadioButton();
        hazelnutHeader = new javax.swing.JLabel();
        hazelnutPurchase = new javax.swing.JButton();
        chocoChipPanel = new javax.swing.JPanel();
        jSpinnerChocoChip = new javax.swing.JSpinner();
        chocoChipPriceLbl = new javax.swing.JLabel();
        chocoChipQtyLbl = new javax.swing.JLabel();
        chocoChipSizeLbl = new javax.swing.JLabel();
        chocoChipPrice = new javax.swing.JTextField();
        mdChocoChip = new javax.swing.JRadioButton();
        smChocoChip = new javax.swing.JRadioButton();
        lgChocoChip = new javax.swing.JRadioButton();
        chocoChipHeader = new javax.swing.JLabel();
        chocoChipPurchase = new javax.swing.JButton();
        cookiesNCreamPanel = new javax.swing.JPanel();
        jSpinnerCookiesNCream = new javax.swing.JSpinner();
        cookiesNCreamPriceLbl = new javax.swing.JLabel();
        cookiesNCreamQtyLbl = new javax.swing.JLabel();
        cookiesNCreamSizeLbl = new javax.swing.JLabel();
        cookiesNCreamPrice = new javax.swing.JTextField();
        mdCookiesNCream = new javax.swing.JRadioButton();
        smCookiesNCream = new javax.swing.JRadioButton();
        lgCookiesNCream = new javax.swing.JRadioButton();
        cookiesNCreamHeader = new javax.swing.JLabel();
        cookiesNCreamPurchase = new javax.swing.JButton();
        frappeLbl = new javax.swing.JLabel();
        whiteMochaPanel = new javax.swing.JPanel();
        jSpinnerWhiteMocha = new javax.swing.JSpinner();
        whiteMochaPriceLbl = new javax.swing.JLabel();
        whiteMochaQtyLbl = new javax.swing.JLabel();
        whiteMochaSizeLbl = new javax.swing.JLabel();
        whiteMochaPrice = new javax.swing.JTextField();
        mdWhiteMocha = new javax.swing.JRadioButton();
        smWhiteMocha = new javax.swing.JRadioButton();
        lgWhiteMocha = new javax.swing.JRadioButton();
        whiteMochaHeader = new javax.swing.JLabel();
        whiteMochaPurchase = new javax.swing.JButton();
        toffeeNutPanel = new javax.swing.JPanel();
        jSpinnerToffeeNut = new javax.swing.JSpinner();
        toffeeNutPriceLbl = new javax.swing.JLabel();
        toffeeNutQtyLbl = new javax.swing.JLabel();
        toffeeNutSizeLbl = new javax.swing.JLabel();
        toffeeNutPrice = new javax.swing.JTextField();
        mdToffeeNut = new javax.swing.JRadioButton();
        smToffeeNut = new javax.swing.JRadioButton();
        lgToffeeNut = new javax.swing.JRadioButton();
        toffeeNutHeader = new javax.swing.JLabel();
        toffeeNutPurchase = new javax.swing.JButton();
        darkChocoPanel = new javax.swing.JPanel();
        jSpinnerDarkChoco = new javax.swing.JSpinner();
        darkChocoPriceLbl = new javax.swing.JLabel();
        darkChocoQtyLbl = new javax.swing.JLabel();
        darkChocoSizeLbl = new javax.swing.JLabel();
        darkChocoPrice = new javax.swing.JTextField();
        mdDarkChoco = new javax.swing.JRadioButton();
        smDarkChoco = new javax.swing.JRadioButton();
        lgDarkChoco = new javax.swing.JRadioButton();
        darkChocoHeader = new javax.swing.JLabel();
        darkChocoPurchase = new javax.swing.JButton();
        pastryLbl = new javax.swing.JLabel();
        painAuChocolatPanel = new javax.swing.JPanel();
        jSpinnerPainAuChocolat = new javax.swing.JSpinner();
        painAuChocolatPriceLbl = new javax.swing.JLabel();
        painAuChocolatQtyLbl = new javax.swing.JLabel();
        painAuChocolatPrice = new javax.swing.JTextField();
        painAuChocolatHeader = new javax.swing.JLabel();
        painAuChocolatPurchase = new javax.swing.JButton();
        macaronPanel = new javax.swing.JPanel();
        jSpinnerMacaron = new javax.swing.JSpinner();
        macaronPriceLbl = new javax.swing.JLabel();
        macaronQtyLbl = new javax.swing.JLabel();
        macaronPrice = new javax.swing.JTextField();
        macaronHeader = new javax.swing.JLabel();
        macaronPurchase = new javax.swing.JButton();
        blueberryCheesecakePanel = new javax.swing.JPanel();
        jSpinnerBlueberryCheesecake = new javax.swing.JSpinner();
        blueberryCheesecakePriceLbl = new javax.swing.JLabel();
        blueberryCheesecakeQtyLbl = new javax.swing.JLabel();
        blueberryCheesecakePrice = new javax.swing.JTextField();
        blueberryCheesecakeHeader = new javax.swing.JLabel();
        blueberryCheesecakePurchase = new javax.swing.JButton();
        customerOptions = new javax.swing.JPanel();
        jButtonPay = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        paymentPanel = new javax.swing.JPanel();
        cashLbl = new javax.swing.JLabel();
        cashTextFld = new javax.swing.JTextField();
        subTotalLbl = new javax.swing.JLabel();
        subTotalTextFld = new javax.swing.JTextField();
        taxLbl = new javax.swing.JLabel();
        taxTextFld = new javax.swing.JTextField();
        totalLbl = new javax.swing.JLabel();
        totalTextFld = new javax.swing.JTextField();
        changeLbl = new javax.swing.JLabel();
        changeTextFld = new javax.swing.JTextField();
        orderListPanel = new javax.swing.JScrollPane();
        orderListTbl = new javax.swing.JTable();
        invoicePanel = new javax.swing.JScrollPane();
        invoiceTextArea = new javax.swing.JTextArea();
        btnDeleteItem = new javax.swing.JButton();
        btnHistory = new javax.swing.JButton();
        btnUpdateOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        shopNamePnl.setBackground(new java.awt.Color(102, 102, 102));
        shopNamePnl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        shopNameLbl.setFont(new java.awt.Font("Script MT Bold", 1, 48)); // NOI18N
        shopNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        shopNameLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        shopNameLbl.setText("Taste The Coffee");

        javax.swing.GroupLayout shopNamePnlLayout = new javax.swing.GroupLayout(shopNamePnl);
        shopNamePnl.setLayout(shopNamePnlLayout);
        shopNamePnlLayout.setHorizontalGroup(
            shopNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shopNamePnlLayout.createSequentialGroup()
                .addGap(590, 590, 590)
                .addComponent(shopNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        shopNamePnlLayout.setVerticalGroup(
            shopNamePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(shopNameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );

        menuItemsPnl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        menuItemsLbl.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        menuItemsLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuItemsLbl.setText("Menu Items");

        coffeeLbl.setBackground(new java.awt.Color(204, 0, 0));
        coffeeLbl.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        coffeeLbl.setText("Coffee");

        americanoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerAmericano.setValue(1);

        americanoPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        americanoPriceLbl.setText("Price:");

        americanoQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        americanoQtyLbl.setText("Quantity:");

        americanoSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        americanoSizeLbl.setText("Size:");

        americanoPrice.setEditable(false);
        americanoPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                americanoPriceActionPerformed(evt);
            }
        });

        americano.add(mdAmericano);
        mdAmericano.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdAmericano.setText("M");
        mdAmericano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdAmericanoActionPerformed(evt);
            }
        });

        americano.add(smAmericano);
        smAmericano.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smAmericano.setText("S");
        smAmericano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smAmericanoActionPerformed(evt);
            }
        });

        americano.add(lgAmericano);
        lgAmericano.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgAmericano.setText("L");
        lgAmericano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgAmericanoActionPerformed(evt);
            }
        });

        americanoHeader.setBackground(new java.awt.Color(204, 0, 0));
        americanoHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        americanoHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Americano.png"))); // NOI18N

        americanoPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        americanoPurchase.setText("Purchase");
        americanoPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                americanoPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout americanoPanelLayout = new javax.swing.GroupLayout(americanoPanel);
        americanoPanel.setLayout(americanoPanelLayout);
        americanoPanelLayout.setHorizontalGroup(
            americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(americanoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(americanoQtyLbl)
                    .addComponent(americanoPriceLbl)
                    .addComponent(americanoSizeLbl))
                .addGap(19, 19, 19)
                .addGroup(americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(americanoPanelLayout.createSequentialGroup()
                        .addComponent(jSpinnerAmericano)
                        .addContainerGap())
                    .addGroup(americanoPanelLayout.createSequentialGroup()
                        .addGroup(americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(americanoPanelLayout.createSequentialGroup()
                                .addComponent(smAmericano)
                                .addGap(26, 26, 26)
                                .addComponent(mdAmericano)
                                .addGap(18, 18, 18)
                                .addComponent(lgAmericano))
                            .addGroup(americanoPanelLayout.createSequentialGroup()
                                .addComponent(americanoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(americanoPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(americanoHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        americanoPanelLayout.setVerticalGroup(
            americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, americanoPanelLayout.createSequentialGroup()
                .addComponent(americanoHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(americanoSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdAmericano)
                        .addComponent(smAmericano)
                        .addComponent(lgAmericano)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerAmericano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(americanoQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(americanoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(americanoPriceLbl)
                    .addComponent(americanoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(americanoPurchase))
                .addGap(11, 11, 11))
        );

        cappucinoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerCappucino.setValue(1);

        cappucinoPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cappucinoPriceLbl.setText("Price:");

        cappucinoQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cappucinoQtyLbl.setText("Quantity:");

        cappucinoSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cappucinoSizeLbl.setText("Size:");

        cappucinoPrice.setEditable(false);

        cappucino.add(mdCappucino);
        mdCappucino.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdCappucino.setText("M");
        mdCappucino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdCappucinoActionPerformed(evt);
            }
        });

        cappucino.add(smCappucino);
        smCappucino.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smCappucino.setText("S");
        smCappucino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smCappucinoActionPerformed(evt);
            }
        });

        cappucino.add(lgCappucino);
        lgCappucino.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgCappucino.setText("L");
        lgCappucino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgCappucinoActionPerformed(evt);
            }
        });

        cappucinoHeader.setBackground(new java.awt.Color(204, 0, 0));
        cappucinoHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        cappucinoHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Cappucino.png"))); // NOI18N

        cappucinoPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cappucinoPurchase.setText("Purchase");
        cappucinoPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cappucinoPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cappucinoPanelLayout = new javax.swing.GroupLayout(cappucinoPanel);
        cappucinoPanel.setLayout(cappucinoPanelLayout);
        cappucinoPanelLayout.setHorizontalGroup(
            cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cappucinoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cappucinoQtyLbl)
                    .addComponent(cappucinoPriceLbl)
                    .addComponent(cappucinoSizeLbl))
                .addGap(22, 22, 22)
                .addGroup(cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerCappucino)
                    .addGroup(cappucinoPanelLayout.createSequentialGroup()
                        .addGroup(cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(cappucinoPanelLayout.createSequentialGroup()
                                .addComponent(smCappucino)
                                .addGap(26, 26, 26)
                                .addComponent(mdCappucino)
                                .addGap(18, 18, 18)
                                .addComponent(lgCappucino))
                            .addGroup(cappucinoPanelLayout.createSequentialGroup()
                                .addComponent(cappucinoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cappucinoPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(cappucinoPanelLayout.createSequentialGroup()
                .addComponent(cappucinoHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        cappucinoPanelLayout.setVerticalGroup(
            cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cappucinoPanelLayout.createSequentialGroup()
                .addComponent(cappucinoHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cappucinoSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdCappucino)
                        .addComponent(smCappucino)
                        .addComponent(lgCappucino)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerCappucino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cappucinoQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cappucinoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cappucinoPriceLbl)
                    .addComponent(cappucinoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cappucinoPurchase))
                .addGap(11, 11, 11))
        );

        lattePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerLatte.setValue(1);

        lattePriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lattePriceLbl.setText("Price:");

        latteQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        latteQtyLbl.setText("Quantity:");

        latteSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        latteSizeLbl.setText("Size:");

        lattePrice.setEditable(false);
        lattePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lattePriceActionPerformed(evt);
            }
        });

        latte.add(mdLatte);
        mdLatte.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdLatte.setText("M");
        mdLatte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdLatteActionPerformed(evt);
            }
        });

        latte.add(smLatte);
        smLatte.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smLatte.setText("S");
        smLatte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smLatteActionPerformed(evt);
            }
        });

        latte.add(lgLatte);
        lgLatte.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgLatte.setText("L");
        lgLatte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgLatteActionPerformed(evt);
            }
        });

        latteHeader.setBackground(new java.awt.Color(204, 0, 0));
        latteHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        latteHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Latte.png"))); // NOI18N

        lattePurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lattePurchase.setText("Purchase");
        lattePurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lattePurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lattePanelLayout = new javax.swing.GroupLayout(lattePanel);
        lattePanel.setLayout(lattePanelLayout);
        lattePanelLayout.setHorizontalGroup(
            lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lattePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(latteQtyLbl)
                    .addComponent(lattePriceLbl)
                    .addComponent(latteSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerLatte)
                    .addGroup(lattePanelLayout.createSequentialGroup()
                        .addGroup(lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lattePanelLayout.createSequentialGroup()
                                .addComponent(smLatte)
                                .addGap(26, 26, 26)
                                .addComponent(mdLatte)
                                .addGap(18, 18, 18)
                                .addComponent(lgLatte))
                            .addGroup(lattePanelLayout.createSequentialGroup()
                                .addComponent(lattePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lattePurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(lattePanelLayout.createSequentialGroup()
                .addComponent(latteHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        lattePanelLayout.setVerticalGroup(
            lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lattePanelLayout.createSequentialGroup()
                .addComponent(latteHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(latteSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdLatte)
                        .addComponent(smLatte)
                        .addComponent(lgLatte)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerLatte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(latteQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lattePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lattePriceLbl)
                    .addComponent(lattePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lattePurchase))
                .addGap(11, 11, 11))
        );

        iceBlendedLbl.setBackground(new java.awt.Color(204, 0, 0));
        iceBlendedLbl.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        iceBlendedLbl.setText("Ice Blended");

        hazelnutPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerHazelnut.setValue(1);

        hazelnutPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        hazelnutPriceLbl.setText("Price:");

        hazelnutQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        hazelnutQtyLbl.setText("Quantity:");

        hazelnutSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        hazelnutSizeLbl.setText("Size:");

        hazelnutPrice.setEditable(false);
        hazelnutPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hazelnutPriceActionPerformed(evt);
            }
        });

        hazelnut.add(mdHazelnut);
        mdHazelnut.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdHazelnut.setText("M");
        mdHazelnut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdHazelnutActionPerformed(evt);
            }
        });

        hazelnut.add(smHazelnut);
        smHazelnut.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smHazelnut.setText("S");
        smHazelnut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smHazelnutActionPerformed(evt);
            }
        });

        hazelnut.add(lgHazelnut);
        lgHazelnut.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgHazelnut.setText("L");
        lgHazelnut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgHazelnutActionPerformed(evt);
            }
        });

        hazelnutHeader.setBackground(new java.awt.Color(204, 0, 0));
        hazelnutHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        hazelnutHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Hazelnut.png"))); // NOI18N

        hazelnutPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        hazelnutPurchase.setText("Purchase");
        hazelnutPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hazelnutPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hazelnutPanelLayout = new javax.swing.GroupLayout(hazelnutPanel);
        hazelnutPanel.setLayout(hazelnutPanelLayout);
        hazelnutPanelLayout.setHorizontalGroup(
            hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hazelnutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hazelnutQtyLbl)
                    .addComponent(hazelnutPriceLbl)
                    .addComponent(hazelnutSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerHazelnut)
                    .addGroup(hazelnutPanelLayout.createSequentialGroup()
                        .addGroup(hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hazelnutPanelLayout.createSequentialGroup()
                                .addComponent(smHazelnut)
                                .addGap(26, 26, 26)
                                .addComponent(mdHazelnut)
                                .addGap(18, 18, 18)
                                .addComponent(lgHazelnut))
                            .addGroup(hazelnutPanelLayout.createSequentialGroup()
                                .addComponent(hazelnutPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hazelnutPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(hazelnutPanelLayout.createSequentialGroup()
                .addComponent(hazelnutHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        hazelnutPanelLayout.setVerticalGroup(
            hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hazelnutPanelLayout.createSequentialGroup()
                .addComponent(hazelnutHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hazelnutSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdHazelnut)
                        .addComponent(smHazelnut)
                        .addComponent(lgHazelnut)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerHazelnut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hazelnutQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hazelnutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hazelnutPriceLbl)
                    .addComponent(hazelnutPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hazelnutPurchase))
                .addGap(11, 11, 11))
        );

        chocoChipPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerChocoChip.setValue(1);

        chocoChipPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        chocoChipPriceLbl.setText("Price:");

        chocoChipQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        chocoChipQtyLbl.setText("Quantity:");

        chocoChipSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        chocoChipSizeLbl.setText("Size:");

        chocoChipPrice.setEditable(false);
        chocoChipPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocoChipPriceActionPerformed(evt);
            }
        });

        chocoChip.add(mdChocoChip);
        mdChocoChip.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdChocoChip.setText("M");
        mdChocoChip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdChocoChipActionPerformed(evt);
            }
        });

        chocoChip.add(smChocoChip);
        smChocoChip.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smChocoChip.setText("S");
        smChocoChip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smChocoChipActionPerformed(evt);
            }
        });

        chocoChip.add(lgChocoChip);
        lgChocoChip.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgChocoChip.setText("L");
        lgChocoChip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgChocoChipActionPerformed(evt);
            }
        });

        chocoChipHeader.setBackground(new java.awt.Color(204, 0, 0));
        chocoChipHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        chocoChipHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Chocolate.png"))); // NOI18N

        chocoChipPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        chocoChipPurchase.setText("Purchase");
        chocoChipPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocoChipPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chocoChipPanelLayout = new javax.swing.GroupLayout(chocoChipPanel);
        chocoChipPanel.setLayout(chocoChipPanelLayout);
        chocoChipPanelLayout.setHorizontalGroup(
            chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chocoChipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chocoChipQtyLbl)
                    .addComponent(chocoChipPriceLbl)
                    .addComponent(chocoChipSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerChocoChip)
                    .addGroup(chocoChipPanelLayout.createSequentialGroup()
                        .addGroup(chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(chocoChipPanelLayout.createSequentialGroup()
                                .addComponent(smChocoChip)
                                .addGap(26, 26, 26)
                                .addComponent(mdChocoChip)
                                .addGap(18, 18, 18)
                                .addComponent(lgChocoChip))
                            .addGroup(chocoChipPanelLayout.createSequentialGroup()
                                .addComponent(chocoChipPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chocoChipPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chocoChipPanelLayout.createSequentialGroup()
                .addComponent(chocoChipHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        chocoChipPanelLayout.setVerticalGroup(
            chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chocoChipPanelLayout.createSequentialGroup()
                .addComponent(chocoChipHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chocoChipSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdChocoChip)
                        .addComponent(smChocoChip)
                        .addComponent(lgChocoChip)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerChocoChip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chocoChipQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chocoChipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chocoChipPriceLbl)
                    .addComponent(chocoChipPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chocoChipPurchase))
                .addGap(11, 11, 11))
        );

        cookiesNCreamPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerCookiesNCream.setValue(1);

        cookiesNCreamPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cookiesNCreamPriceLbl.setText("Price:");

        cookiesNCreamQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cookiesNCreamQtyLbl.setText("Quantity:");

        cookiesNCreamSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cookiesNCreamSizeLbl.setText("Size:");

        cookiesNCreamPrice.setEditable(false);

        cookiesNCream.add(mdCookiesNCream);
        mdCookiesNCream.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdCookiesNCream.setText("M");
        mdCookiesNCream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdCookiesNCreamActionPerformed(evt);
            }
        });

        cookiesNCream.add(smCookiesNCream);
        smCookiesNCream.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smCookiesNCream.setText("S");
        smCookiesNCream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smCookiesNCreamActionPerformed(evt);
            }
        });

        cookiesNCream.add(lgCookiesNCream);
        lgCookiesNCream.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgCookiesNCream.setText("L");
        lgCookiesNCream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgCookiesNCreamActionPerformed(evt);
            }
        });

        cookiesNCreamHeader.setBackground(new java.awt.Color(204, 0, 0));
        cookiesNCreamHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        cookiesNCreamHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Cookies n' cream.png"))); // NOI18N

        cookiesNCreamPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cookiesNCreamPurchase.setText("Purchase");
        cookiesNCreamPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cookiesNCreamPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cookiesNCreamPanelLayout = new javax.swing.GroupLayout(cookiesNCreamPanel);
        cookiesNCreamPanel.setLayout(cookiesNCreamPanelLayout);
        cookiesNCreamPanelLayout.setHorizontalGroup(
            cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cookiesNCreamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cookiesNCreamQtyLbl)
                    .addComponent(cookiesNCreamPriceLbl)
                    .addComponent(cookiesNCreamSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerCookiesNCream)
                    .addGroup(cookiesNCreamPanelLayout.createSequentialGroup()
                        .addGroup(cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cookiesNCreamPanelLayout.createSequentialGroup()
                                .addComponent(smCookiesNCream)
                                .addGap(26, 26, 26)
                                .addComponent(mdCookiesNCream)
                                .addGap(18, 18, 18)
                                .addComponent(lgCookiesNCream))
                            .addGroup(cookiesNCreamPanelLayout.createSequentialGroup()
                                .addComponent(cookiesNCreamPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cookiesNCreamPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(cookiesNCreamPanelLayout.createSequentialGroup()
                .addComponent(cookiesNCreamHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        cookiesNCreamPanelLayout.setVerticalGroup(
            cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cookiesNCreamPanelLayout.createSequentialGroup()
                .addComponent(cookiesNCreamHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cookiesNCreamSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdCookiesNCream)
                        .addComponent(smCookiesNCream)
                        .addComponent(lgCookiesNCream)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerCookiesNCream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cookiesNCreamQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cookiesNCreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cookiesNCreamPriceLbl)
                    .addComponent(cookiesNCreamPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cookiesNCreamPurchase))
                .addGap(11, 11, 11))
        );

        frappeLbl.setBackground(new java.awt.Color(204, 0, 0));
        frappeLbl.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        frappeLbl.setText("Frappe");

        whiteMochaPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerWhiteMocha.setValue(1);

        whiteMochaPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        whiteMochaPriceLbl.setText("Price:");

        whiteMochaQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        whiteMochaQtyLbl.setText("Quantity:");

        whiteMochaSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        whiteMochaSizeLbl.setText("Size:");

        whiteMochaPrice.setEditable(false);
        whiteMochaPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteMochaPriceActionPerformed(evt);
            }
        });

        whiteMocha.add(mdWhiteMocha);
        mdWhiteMocha.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdWhiteMocha.setText("M");
        mdWhiteMocha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdWhiteMochaActionPerformed(evt);
            }
        });

        whiteMocha.add(smWhiteMocha);
        smWhiteMocha.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smWhiteMocha.setText("S");
        smWhiteMocha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smWhiteMochaActionPerformed(evt);
            }
        });

        whiteMocha.add(lgWhiteMocha);
        lgWhiteMocha.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgWhiteMocha.setText("L");
        lgWhiteMocha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgWhiteMochaActionPerformed(evt);
            }
        });

        whiteMochaHeader.setBackground(new java.awt.Color(204, 0, 0));
        whiteMochaHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        whiteMochaHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/White Mocha.png"))); // NOI18N

        whiteMochaPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        whiteMochaPurchase.setText("Purchase");
        whiteMochaPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteMochaPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout whiteMochaPanelLayout = new javax.swing.GroupLayout(whiteMochaPanel);
        whiteMochaPanel.setLayout(whiteMochaPanelLayout);
        whiteMochaPanelLayout.setHorizontalGroup(
            whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(whiteMochaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(whiteMochaQtyLbl)
                    .addComponent(whiteMochaPriceLbl)
                    .addComponent(whiteMochaSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerWhiteMocha)
                    .addGroup(whiteMochaPanelLayout.createSequentialGroup()
                        .addGroup(whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(whiteMochaPanelLayout.createSequentialGroup()
                                .addComponent(smWhiteMocha)
                                .addGap(26, 26, 26)
                                .addComponent(mdWhiteMocha)
                                .addGap(18, 18, 18)
                                .addComponent(lgWhiteMocha))
                            .addGroup(whiteMochaPanelLayout.createSequentialGroup()
                                .addComponent(whiteMochaPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(whiteMochaPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(whiteMochaPanelLayout.createSequentialGroup()
                .addComponent(whiteMochaHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        whiteMochaPanelLayout.setVerticalGroup(
            whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, whiteMochaPanelLayout.createSequentialGroup()
                .addComponent(whiteMochaHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(whiteMochaSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdWhiteMocha)
                        .addComponent(smWhiteMocha)
                        .addComponent(lgWhiteMocha)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerWhiteMocha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(whiteMochaQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(whiteMochaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(whiteMochaPriceLbl)
                    .addComponent(whiteMochaPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(whiteMochaPurchase))
                .addGap(11, 11, 11))
        );

        toffeeNutPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerToffeeNut.setValue(1);

        toffeeNutPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        toffeeNutPriceLbl.setText("Price:");

        toffeeNutQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        toffeeNutQtyLbl.setText("Quantity:");

        toffeeNutSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        toffeeNutSizeLbl.setText("Size:");

        toffeeNutPrice.setEditable(false);
        toffeeNutPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toffeeNutPriceActionPerformed(evt);
            }
        });

        toffeeNut.add(mdToffeeNut);
        mdToffeeNut.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdToffeeNut.setText("M");
        mdToffeeNut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdToffeeNutNutActionPerformed(evt);
            }
        });

        toffeeNut.add(smToffeeNut);
        smToffeeNut.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smToffeeNut.setText("S");
        smToffeeNut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smToffeeNutActionPerformed(evt);
            }
        });

        toffeeNut.add(lgToffeeNut);
        lgToffeeNut.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgToffeeNut.setText("L");
        lgToffeeNut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgToffeeNutActionPerformed(evt);
            }
        });

        toffeeNutHeader.setBackground(new java.awt.Color(204, 0, 0));
        toffeeNutHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        toffeeNutHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Toffee.png"))); // NOI18N

        toffeeNutPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        toffeeNutPurchase.setText("Purchase");
        toffeeNutPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toffeeNutPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toffeeNutPanelLayout = new javax.swing.GroupLayout(toffeeNutPanel);
        toffeeNutPanel.setLayout(toffeeNutPanelLayout);
        toffeeNutPanelLayout.setHorizontalGroup(
            toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toffeeNutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toffeeNutQtyLbl)
                    .addComponent(toffeeNutPriceLbl)
                    .addComponent(toffeeNutSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerToffeeNut)
                    .addGroup(toffeeNutPanelLayout.createSequentialGroup()
                        .addGroup(toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(toffeeNutPanelLayout.createSequentialGroup()
                                .addComponent(smToffeeNut)
                                .addGap(26, 26, 26)
                                .addComponent(mdToffeeNut)
                                .addGap(18, 18, 18)
                                .addComponent(lgToffeeNut))
                            .addGroup(toffeeNutPanelLayout.createSequentialGroup()
                                .addComponent(toffeeNutPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toffeeNutPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(toffeeNutPanelLayout.createSequentialGroup()
                .addComponent(toffeeNutHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        toffeeNutPanelLayout.setVerticalGroup(
            toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toffeeNutPanelLayout.createSequentialGroup()
                .addComponent(toffeeNutHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toffeeNutSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdToffeeNut)
                        .addComponent(smToffeeNut)
                        .addComponent(lgToffeeNut)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerToffeeNut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toffeeNutQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(toffeeNutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toffeeNutPriceLbl)
                    .addComponent(toffeeNutPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toffeeNutPurchase))
                .addGap(11, 11, 11))
        );

        darkChocoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerDarkChoco.setValue(1);

        darkChocoPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        darkChocoPriceLbl.setText("Price:");

        darkChocoQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        darkChocoQtyLbl.setText("Quantity:");

        darkChocoSizeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        darkChocoSizeLbl.setText("Size:");

        darkChocoPrice.setEditable(false);

        darkChoco.add(mdDarkChoco);
        mdDarkChoco.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        mdDarkChoco.setText("M");
        mdDarkChoco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdDarkChocoActionPerformed(evt);
            }
        });

        darkChoco.add(smDarkChoco);
        smDarkChoco.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        smDarkChoco.setText("S");
        smDarkChoco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smDarkChocoActionPerformed(evt);
            }
        });

        darkChoco.add(lgDarkChoco);
        lgDarkChoco.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lgDarkChoco.setText("L");
        lgDarkChoco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgDarkChocoActionPerformed(evt);
            }
        });

        darkChocoHeader.setBackground(new java.awt.Color(204, 0, 0));
        darkChocoHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        darkChocoHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Dark Choco.png"))); // NOI18N

        darkChocoPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        darkChocoPurchase.setText("Purchase");
        darkChocoPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkChocoPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout darkChocoPanelLayout = new javax.swing.GroupLayout(darkChocoPanel);
        darkChocoPanel.setLayout(darkChocoPanelLayout);
        darkChocoPanelLayout.setHorizontalGroup(
            darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(darkChocoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(darkChocoQtyLbl)
                    .addComponent(darkChocoPriceLbl)
                    .addComponent(darkChocoSizeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerDarkChoco)
                    .addGroup(darkChocoPanelLayout.createSequentialGroup()
                        .addGroup(darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(darkChocoPanelLayout.createSequentialGroup()
                                .addComponent(smDarkChoco)
                                .addGap(26, 26, 26)
                                .addComponent(mdDarkChoco)
                                .addGap(18, 18, 18)
                                .addComponent(lgDarkChoco))
                            .addGroup(darkChocoPanelLayout.createSequentialGroup()
                                .addComponent(darkChocoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(darkChocoPurchase)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(darkChocoPanelLayout.createSequentialGroup()
                .addComponent(darkChocoHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        darkChocoPanelLayout.setVerticalGroup(
            darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, darkChocoPanelLayout.createSequentialGroup()
                .addComponent(darkChocoHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(darkChocoSizeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mdDarkChoco)
                        .addComponent(smDarkChoco)
                        .addComponent(lgDarkChoco)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerDarkChoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(darkChocoQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(darkChocoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(darkChocoPriceLbl)
                    .addComponent(darkChocoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(darkChocoPurchase))
                .addGap(11, 11, 11))
        );

        pastryLbl.setBackground(new java.awt.Color(204, 0, 0));
        pastryLbl.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        pastryLbl.setText("Pastry");

        painAuChocolatPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerPainAuChocolat.setValue(1);

        painAuChocolatPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        painAuChocolatPriceLbl.setText("Price:");

        painAuChocolatQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        painAuChocolatQtyLbl.setText("Quantity:");

        painAuChocolatPrice.setEditable(false);
        painAuChocolatPrice.setText("70");
        painAuChocolatPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                painAuChocolatPriceActionPerformed(evt);
            }
        });

        painAuChocolatHeader.setBackground(new java.awt.Color(204, 0, 0));
        painAuChocolatHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        painAuChocolatHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Pain Au Chocolat.png"))); // NOI18N

        painAuChocolatPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        painAuChocolatPurchase.setText("Purchase");
        painAuChocolatPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                painAuChocolatPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painAuChocolatPanelLayout = new javax.swing.GroupLayout(painAuChocolatPanel);
        painAuChocolatPanel.setLayout(painAuChocolatPanelLayout);
        painAuChocolatPanelLayout.setHorizontalGroup(
            painAuChocolatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painAuChocolatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painAuChocolatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painAuChocolatQtyLbl)
                    .addComponent(painAuChocolatPriceLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painAuChocolatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerPainAuChocolat)
                    .addGroup(painAuChocolatPanelLayout.createSequentialGroup()
                        .addComponent(painAuChocolatPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painAuChocolatPurchase)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(painAuChocolatPanelLayout.createSequentialGroup()
                .addComponent(painAuChocolatHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        painAuChocolatPanelLayout.setVerticalGroup(
            painAuChocolatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painAuChocolatPanelLayout.createSequentialGroup()
                .addComponent(painAuChocolatHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(painAuChocolatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerPainAuChocolat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painAuChocolatQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painAuChocolatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(painAuChocolatPriceLbl)
                    .addComponent(painAuChocolatPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painAuChocolatPurchase))
                .addGap(11, 11, 11))
        );

        macaronPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerMacaron.setValue(1);

        macaronPriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        macaronPriceLbl.setText("Price:");

        macaronQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        macaronQtyLbl.setText("Quantity:");

        macaronPrice.setEditable(false);
        macaronPrice.setText("40");
        macaronPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macaronPriceActionPerformed(evt);
            }
        });

        macaronHeader.setBackground(new java.awt.Color(204, 0, 0));
        macaronHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        macaronHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Macaron.png"))); // NOI18N

        macaronPurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        macaronPurchase.setText("Purchase");
        macaronPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macaronPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout macaronPanelLayout = new javax.swing.GroupLayout(macaronPanel);
        macaronPanel.setLayout(macaronPanelLayout);
        macaronPanelLayout.setHorizontalGroup(
            macaronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macaronPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macaronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(macaronQtyLbl)
                    .addComponent(macaronPriceLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(macaronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerMacaron)
                    .addGroup(macaronPanelLayout.createSequentialGroup()
                        .addComponent(macaronPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(macaronPurchase)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(macaronPanelLayout.createSequentialGroup()
                .addComponent(macaronHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        macaronPanelLayout.setVerticalGroup(
            macaronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, macaronPanelLayout.createSequentialGroup()
                .addComponent(macaronHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(macaronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerMacaron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(macaronQtyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(macaronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(macaronPriceLbl)
                    .addComponent(macaronPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(macaronPurchase))
                .addGap(11, 11, 11))
        );

        blueberryCheesecakePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSpinnerBlueberryCheesecake.setValue(1);

        blueberryCheesecakePriceLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        blueberryCheesecakePriceLbl.setText("Price:");

        blueberryCheesecakeQtyLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        blueberryCheesecakeQtyLbl.setText("Quantity:");

        blueberryCheesecakePrice.setEditable(false);
        blueberryCheesecakePrice.setText("90");

        blueberryCheesecakeHeader.setBackground(new java.awt.Color(204, 0, 0));
        blueberryCheesecakeHeader.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        blueberryCheesecakeHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffee/Cheesecake.png"))); // NOI18N

        blueberryCheesecakePurchase.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        blueberryCheesecakePurchase.setText("Purchase");
        blueberryCheesecakePurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueberryCheesecakePurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blueberryCheesecakePanelLayout = new javax.swing.GroupLayout(blueberryCheesecakePanel);
        blueberryCheesecakePanel.setLayout(blueberryCheesecakePanelLayout);
        blueberryCheesecakePanelLayout.setHorizontalGroup(
            blueberryCheesecakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blueberryCheesecakePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blueberryCheesecakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blueberryCheesecakeQtyLbl)
                    .addComponent(blueberryCheesecakePriceLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blueberryCheesecakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerBlueberryCheesecake)
                    .addGroup(blueberryCheesecakePanelLayout.createSequentialGroup()
                        .addComponent(blueberryCheesecakePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blueberryCheesecakePurchase)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(blueberryCheesecakePanelLayout.createSequentialGroup()
                .addComponent(blueberryCheesecakeHeader)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        blueberryCheesecakePanelLayout.setVerticalGroup(
            blueberryCheesecakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blueberryCheesecakePanelLayout.createSequentialGroup()
                .addComponent(blueberryCheesecakeHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(blueberryCheesecakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerBlueberryCheesecake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blueberryCheesecakeQtyLbl))
                .addGap(6, 6, 6)
                .addGroup(blueberryCheesecakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blueberryCheesecakePriceLbl)
                    .addComponent(blueberryCheesecakePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blueberryCheesecakePurchase))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout menuItemsPnlLayout = new javax.swing.GroupLayout(menuItemsPnl);
        menuItemsPnl.setLayout(menuItemsPnlLayout);
        menuItemsPnlLayout.setHorizontalGroup(
            menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuItemsLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(menuItemsPnlLayout.createSequentialGroup()
                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(menuItemsPnlLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pastryLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(menuItemsPnlLayout.createSequentialGroup()
                                .addComponent(painAuChocolatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(macaronPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(blueberryCheesecakePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(menuItemsPnlLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(coffeeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(menuItemsPnlLayout.createSequentialGroup()
                                .addComponent(americanoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cappucinoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lattePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(menuItemsPnlLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(frappeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iceBlendedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(menuItemsPnlLayout.createSequentialGroup()
                                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hazelnutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(whiteMochaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(toffeeNutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chocoChipPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cookiesNCreamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(darkChocoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        menuItemsPnlLayout.setVerticalGroup(
            menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuItemsPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuItemsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coffeeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lattePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cappucinoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(americanoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(iceBlendedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cookiesNCreamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chocoChipPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hazelnutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(frappeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(darkChocoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toffeeNutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(whiteMochaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(pastryLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuItemsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(macaronPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blueberryCheesecakePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painAuChocolatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        customerOptions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButtonPay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonPay.setText("Pay");
        jButtonPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPayActionPerformed(evt);
            }
        });

        jButtonReset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerOptionsLayout = new javax.swing.GroupLayout(customerOptions);
        customerOptions.setLayout(customerOptionsLayout);
        customerOptionsLayout.setHorizontalGroup(
            customerOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerOptionsLayout.createSequentialGroup()
                .addContainerGap(123, Short.MAX_VALUE)
                .addGroup(customerOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPay, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120))
        );
        customerOptionsLayout.setVerticalGroup(
            customerOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerOptionsLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jButtonPay, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paymentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cashLbl.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        cashLbl.setText("Cash");

        cashTextFld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        cashTextFld.setText("0.0");
        cashTextFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashTextFldActionPerformed(evt);
            }
        });

        subTotalLbl.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        subTotalLbl.setText("SubTotal");

        subTotalTextFld.setEditable(false);
        subTotalTextFld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        subTotalTextFld.setText("0.0");

        taxLbl.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        taxLbl.setText("Tax");

        taxTextFld.setEditable(false);
        taxTextFld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        taxTextFld.setText("0.0");
        taxTextFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taxTextFldActionPerformed(evt);
            }
        });

        totalLbl.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        totalLbl.setText("Total");

        totalTextFld.setEditable(false);
        totalTextFld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        totalTextFld.setText("0.0");

        changeLbl.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        changeLbl.setText("Change");

        changeTextFld.setEditable(false);
        changeTextFld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        changeTextFld.setText("0.0");

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(subTotalLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(taxLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(changeLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cashLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalTextFld, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(taxTextFld)
                            .addGroup(paymentPanelLayout.createSequentialGroup()
                                .addComponent(subTotalTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(changeTextFld)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cashTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13))
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subTotalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subTotalTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taxLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taxTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeLbl))
                .addGap(16, 16, 16))
        );

        orderListTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Quantity", "Size", "Unit Price", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderListTbl.getTableHeader().setReorderingAllowed(false);
        orderListPanel.setViewportView(orderListTbl);
        if (orderListTbl.getColumnModel().getColumnCount() > 0) {
            orderListTbl.getColumnModel().getColumn(0).setResizable(false);
            orderListTbl.getColumnModel().getColumn(0).setPreferredWidth(50);
            orderListTbl.getColumnModel().getColumn(1).setResizable(false);
            orderListTbl.getColumnModel().getColumn(1).setPreferredWidth(150);
            orderListTbl.getColumnModel().getColumn(2).setResizable(false);
            orderListTbl.getColumnModel().getColumn(3).setResizable(false);
            orderListTbl.getColumnModel().getColumn(4).setResizable(false);
            orderListTbl.getColumnModel().getColumn(5).setResizable(false);
        }

        invoiceTextArea.setEditable(false);
        invoiceTextArea.setColumns(20);
        invoiceTextArea.setRows(5);
        invoicePanel.setViewportView(invoiceTextArea);

        btnDeleteItem.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        btnDeleteItem.setText("Delete");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnHistory.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        btnHistory.setText("History");
        btnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });

        btnUpdateOrder.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        btnUpdateOrder.setText("Update");
        btnUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(menuItemsPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(orderListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(invoicePanel)
                    .addComponent(customerOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 12, Short.MAX_VALUE))
            .addComponent(shopNamePnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(shopNamePnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(menuItemsPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdateOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(invoicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(customerOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(20, 20, 20))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lgAmericanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgAmericanoActionPerformed
        // TODO add your handling code here:
        americanoPrice.setText("110");
    }//GEN-LAST:event_lgAmericanoActionPerformed

    private void smAmericanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smAmericanoActionPerformed
        // TODO add your handling code here:
        americanoPrice.setText("80");
    }//GEN-LAST:event_smAmericanoActionPerformed

    private void mdAmericanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdAmericanoActionPerformed
        // TODO add your handling code here:
        americanoPrice.setText("100");
    }//GEN-LAST:event_mdAmericanoActionPerformed

    private void mdCappucinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdCappucinoActionPerformed
        // TODO add your handling code here:
        cappucinoPrice.setText("115");
    }//GEN-LAST:event_mdCappucinoActionPerformed

    private void smCappucinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smCappucinoActionPerformed
        // TODO add your handling code here:
        cappucinoPrice.setText("95");
    }//GEN-LAST:event_smCappucinoActionPerformed

    private void lgCappucinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgCappucinoActionPerformed
        // TODO add your handling code here:
        cappucinoPrice.setText("125");
    }//GEN-LAST:event_lgCappucinoActionPerformed

    private void mdLatteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdLatteActionPerformed
        // TODO add your handling code here:
        lattePrice.setText("105");
    }//GEN-LAST:event_mdLatteActionPerformed

    private void smLatteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smLatteActionPerformed
        // TODO add your handling code here:
        lattePrice.setText("85");
    }//GEN-LAST:event_smLatteActionPerformed

    private void lgLatteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgLatteActionPerformed
        // TODO add your handling code here:
        lattePrice.setText("115");
    }//GEN-LAST:event_lgLatteActionPerformed

    private void mdWhiteMochaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdWhiteMochaActionPerformed
        // TODO add your handling code here:
        whiteMochaPrice.setText("140");
    }//GEN-LAST:event_mdWhiteMochaActionPerformed

    private void smWhiteMochaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smWhiteMochaActionPerformed
        // TODO add your handling code here:
        whiteMochaPrice.setText("120");
    }//GEN-LAST:event_smWhiteMochaActionPerformed

    private void lgWhiteMochaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgWhiteMochaActionPerformed
        // TODO add your handling code here:
        whiteMochaPrice.setText("150");
    }//GEN-LAST:event_lgWhiteMochaActionPerformed

    private void mdChocoChipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdChocoChipActionPerformed
        // TODO add your handling code here:
        chocoChipPrice.setText("130");
    }//GEN-LAST:event_mdChocoChipActionPerformed

    private void smChocoChipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smChocoChipActionPerformed
        // TODO add your handling code here:
        chocoChipPrice.setText("110");
    }//GEN-LAST:event_smChocoChipActionPerformed

    private void lgChocoChipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgChocoChipActionPerformed
        // TODO add your handling code here:
        chocoChipPrice.setText("140");
    }//GEN-LAST:event_lgChocoChipActionPerformed

    private void mdCookiesNCreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdCookiesNCreamActionPerformed
        // TODO add your handling code here:
        cookiesNCreamPrice.setText("130");
    }//GEN-LAST:event_mdCookiesNCreamActionPerformed

    private void smCookiesNCreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smCookiesNCreamActionPerformed
        // TODO add your handling code here:
        cookiesNCreamPrice.setText("110");
    }//GEN-LAST:event_smCookiesNCreamActionPerformed

    private void lgCookiesNCreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgCookiesNCreamActionPerformed
        // TODO add your handling code here:
        cookiesNCreamPrice.setText("140");
    }//GEN-LAST:event_lgCookiesNCreamActionPerformed

    private void mdHazelnutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdHazelnutActionPerformed
        // TODO add your handling code here:
        hazelnutPrice.setText("120");
    }//GEN-LAST:event_mdHazelnutActionPerformed

    private void smHazelnutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smHazelnutActionPerformed
        // TODO add your handling code here:
        hazelnutPrice.setText("100");
    }//GEN-LAST:event_smHazelnutActionPerformed

    private void lgHazelnutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgHazelnutActionPerformed
        // TODO add your handling code here:
        hazelnutPrice.setText("130");
    }//GEN-LAST:event_lgHazelnutActionPerformed

    private void mdToffeeNutNutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdToffeeNutNutActionPerformed
        // TODO add your handling code here:
        toffeeNutPrice.setText("140");
    }//GEN-LAST:event_mdToffeeNutNutActionPerformed

    private void smToffeeNutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smToffeeNutActionPerformed
        // TODO add your handling code here:
        toffeeNutPrice.setText("120");
    }//GEN-LAST:event_smToffeeNutActionPerformed

    private void lgToffeeNutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgToffeeNutActionPerformed
        // TODO add your handling code here:
        toffeeNutPrice.setText("150");
    }//GEN-LAST:event_lgToffeeNutActionPerformed

    private void jButtonPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPayActionPerformed
        // TODO add your handling code here:
        Double cash = 0.0
            , subTotal = 0.0
            , tax = 0.0
            , change = 0.0;

        cash = Double.parseDouble(cashTextFld.getText());
        
        if (orderListTbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please add an order before paying!");
        } else if(cash > total) {
            int response = JOptionPane.showConfirmDialog(this,
            "Are you sure?",
            "Pay",
            JOptionPane.YES_NO_OPTION);
            
            if(response == JOptionPane.YES_OPTION) {
                for(Sale sale : sales) {
                    subTotal += sale.getAmount();
                }
                tax = 0.12 * subTotal;
                total = subTotal + tax;
                change = cash - total;

                subTotalTextFld.setText(String.valueOf(subTotal));
                taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
                totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
                changeTextFld.setText(String.valueOf(Math.round(change * 100.0) / 100.0));          
                
                // Insert Invoice into the database
                Date currDate = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String currentTime = sdf.format(currDate);
                OrderManager.recordInvoice(currentTime, operatingCashier.getId(), subTotal, total);
                int invoiceNum = OrderManager.getInvoiceLatest().getInvoiceID();
                for(Sale sale : sales) {
                    sale.setInvoiceID(invoiceNum);
                }
                OrderManager.recordSale(sales);
                
                // Display Invoice
                String textTitle = String.format("*********************************Taste The Coffee******************************\n"
                                               + "Time\\Date: %s\n"
                                               + "Invoice ID: %d\n"
                                               + "**********************************************************************************\n"
                                               + "Item Name:             \tQty\tPrice($)\tAmount\n"
                                               , currentTime, invoiceNum);
                
                String textItems = "";
                for(int i = 0; i < sales.size(); i++) {
                    textItems += String.format("%d. %-20s\t%-3d\t%-8.2f\t%-6.2f\n"
                                              , i+1
                                              , sales.get(i).getProductName()
                                              , sales.get(i).getQuantity()
                                              , sales.get(i).getUnitPrice()
                                              , sales.get(i).getAmount());
                } 
                
                String textTotal = String.format("**********************************************************************************\n"
                                               + "Tax: %.2f\n"
                                               + "Sub Total: %.2f\n"
                                               + "Total: %.2f\n"
                                               + "**********************************************************************************\n"
                                               , tax, subTotal, total);
                invoiceTextArea.setText(textTitle + textItems + textTotal);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Not enough cash!");
        }
    }//GEN-LAST:event_jButtonPayActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        int response = JOptionPane.showConfirmDialog(this,
            "Are you sure?",
            "Reset",
            JOptionPane.YES_NO_OPTION);
            
        if(response == JOptionPane.YES_OPTION) {
            resetToZero(); 
        }              
    }//GEN-LAST:event_jActionPerformed
    private void americanoPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_americanoPriceActionPerformed
     
    }//GEN-LAST:event_americanoPriceActionPerformed

    private void mdDarkChocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdDarkChocoActionPerformed
        // TODO add your handling code here:
        darkChocoPrice.setText("140");
    }//GEN-LAST:event_mdDarkChocoActionPerformed

    private void smDarkChocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smDarkChocoActionPerformed
        // TODO add your handling code here:
        darkChocoPrice.setText("120");
    }//GEN-LAST:event_smDarkChocoActionPerformed

    private void lgDarkChocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgDarkChocoActionPerformed
        // TODO add your handling code here:
        darkChocoPrice.setText("150");
    }//GEN-LAST:event_lgDarkChocoActionPerformed

    private void taxTextFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taxTextFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taxTextFldActionPerformed

    private void btnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        // TODO add your handling code here:
        history history = new history();
        history.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        history.setVisible(true);
    }//GEN-LAST:event_btnHistoryActionPerformed

    private void whiteMochaPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteMochaPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_whiteMochaPriceActionPerformed

    private void lattePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lattePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lattePriceActionPerformed

    private void chocoChipPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocoChipPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chocoChipPriceActionPerformed

    private void toffeeNutPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toffeeNutPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toffeeNutPriceActionPerformed

    private void painAuChocolatPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_painAuChocolatPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_painAuChocolatPriceActionPerformed

    private void macaronPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macaronPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_macaronPriceActionPerformed

    private void cashTextFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashTextFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashTextFldActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
        
        if(orderListTbl.getSelectedRowCount() == 1) {
            int currentProdID = Integer.parseInt(orderListTbl.getValueAt(orderListTbl.getSelectedRow(), 0).toString());
            sales.removeIf(sales -> sales.getitemID() == currentProdID);
            tblModel.removeRow(orderListTbl.getSelectedRow());
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));           
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
        } else {
            if(orderListTbl.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Order is empty!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select an order to be removed!");
            }
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateOrderActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
        
        if(orderListTbl.getSelectedRowCount() == 1) {
            int currentProdID = Integer.parseInt(orderListTbl.getValueAt(orderListTbl.getSelectedRow(), 0).toString());
            int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter the quantity"));
            double unitPrice = Double.parseDouble(orderListTbl.getValueAt(orderListTbl.getSelectedRow(), 4).toString());
            double amount = unitPrice * quantity;
            
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(Integer.parseInt(tblModel.getValueAt(i, 0).toString()) == currentProdID) {
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));           
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
        } else {
            if(orderListTbl.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Order is empty!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select an order to be updated!");
            }
        }
        
    }//GEN-LAST:event_btnUpdateOrderActionPerformed
    
    private int smAmericanoQty = 0;
    private int mdAmericanoQty = 0;
    private int lgAmericanoQty = 0;
    private void americanoPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_americanoPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Americano";
        String sizeName = "";
        int quantity = 0;
        boolean isSizeSelected = false;
        if (smAmericano.isSelected() || mdAmericano.isSelected() || lgAmericano.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {            
            if (smAmericano.isSelected()) {
                sizeName = smAmericano.getText();
                smAmericanoQty += (int) jSpinnerAmericano.getValue();
                quantity = smAmericanoQty;
            } else if (mdAmericano.isSelected()) {
                sizeName = mdAmericano.getText();
                mdAmericanoQty += (int) jSpinnerAmericano.getValue();
                quantity = mdAmericanoQty;
            } else if (lgAmericano.isSelected()) {
                sizeName = lgAmericano.getText();
                lgAmericanoQty += (int) jSpinnerAmericano.getValue();
                quantity = lgAmericanoQty;
            }
            Double unitPrice = Double.parseDouble(americanoPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleAmericano = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
   
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleAmericano);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleAmericano);
                itemID++;
            }
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));           
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_americanoPurchaseActionPerformed

    private int smCappucinoQty = 0;
    private int mdCappucinoQty = 0;
    private int lgCappucinoQty = 0;
    private void cappucinoPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cappucinoPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Cappucino";
        String sizeName = "";
        int quantity = 0;
        boolean isSizeSelected = false;
        if (smCappucino.isSelected() || mdCappucino.isSelected() || lgCappucino.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {   
            if (smCappucino.isSelected()) {
                sizeName = smCappucino.getText();
                smCappucinoQty += (int) jSpinnerCappucino.getValue();
                quantity = smCappucinoQty;
            } else if (mdCappucino.isSelected()) {
                sizeName = mdCappucino.getText();
                mdCappucinoQty += (int) jSpinnerCappucino.getValue();
                quantity = mdCappucinoQty;
            } else if (lgCappucino.isSelected()) {
                sizeName = lgCappucino.getText();
                lgCappucinoQty += (int) jSpinnerCappucino.getValue();
                quantity = lgCappucinoQty;
            }
            Double unitPrice = Double.parseDouble(cappucinoPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleCappucino = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleCappucino);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleCappucino);
                itemID++;
            }
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));           
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_cappucinoPurchaseActionPerformed
    
    private int smLatteQty = 0;
    private int mdLatteQty = 0;
    private int lgLatteQty = 0;
    private void lattePurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lattePurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Café Latte";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smLatte.isSelected() || mdLatte.isSelected() || lgLatte.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {            
            if (smLatte.isSelected()) {
                sizeName = smLatte.getText();
                smLatteQty += (int) jSpinnerLatte.getValue();
                quantity = smLatteQty;
            } else if (mdLatte.isSelected()) {
                sizeName = mdLatte.getText();
                mdLatteQty += (int) jSpinnerLatte.getValue();
                quantity = mdLatteQty;
            } else if (lgLatte.isSelected()) {
                sizeName = lgLatte.getText();
                lgLatteQty += (int) jSpinnerLatte.getValue();
                quantity = lgLatteQty;
            }
            Double unitPrice = Double.parseDouble(lattePrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleLatte = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleLatte);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleLatte);
                itemID++;
            }
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));            
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_lattePurchaseActionPerformed
    
    private int smHazelnutQty = 0;
    private int mdHazelnutQty = 0;
    private int lgHazelnutQty = 0;
    private void hazelnutPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hazelnutPurchaseActionPerformed
        // TODO add your handling code here:        
        String prodName = "Hazelnut Mocha";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smHazelnut.isSelected() || mdHazelnut.isSelected() || lgHazelnut.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {             
            if (smHazelnut.isSelected()) {
                sizeName = smHazelnut.getText();
                smHazelnutQty += (int) jSpinnerHazelnut.getValue();
                quantity = smHazelnutQty;
            } else if (mdHazelnut.isSelected()) {
                sizeName = mdHazelnut.getText();
                mdHazelnutQty += (int) jSpinnerHazelnut.getValue();
                quantity = mdHazelnutQty;
            } else if (lgHazelnut.isSelected()) {
                sizeName = lgHazelnut.getText();
                lgHazelnutQty += (int) jSpinnerHazelnut.getValue();
                quantity = lgHazelnutQty;
            }
            Double unitPrice = Double.parseDouble(hazelnutPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleHazelnut = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleHazelnut);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleHazelnut);
                itemID++;
            }
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(Math.round(total * 100.0) / 100.0));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_hazelnutPurchaseActionPerformed

    private int smChocoChipQty = 0;
    private int mdChocoChipQty = 0;
    private int lgChocoChipQty = 0;
    private void chocoChipPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocoChipPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Chocolate Chip";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smChocoChip.isSelected() || mdChocoChip.isSelected() || lgChocoChip.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {               
            if (smChocoChip.isSelected()) {
                sizeName = smChocoChip.getText();
                smChocoChipQty += (int) jSpinnerChocoChip.getValue();
                quantity = smChocoChipQty;
            } else if (mdChocoChip.isSelected()) {
                sizeName = mdChocoChip.getText();
                mdChocoChipQty += (int) jSpinnerChocoChip.getValue();
                quantity = mdChocoChipQty;
            } else if (lgChocoChip.isSelected()) {
                sizeName = lgChocoChip.getText();
                lgChocoChipQty += (int) jSpinnerChocoChip.getValue();
                quantity = lgChocoChipQty;
            }
            Double unitPrice = Double.parseDouble(chocoChipPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleChocoChip = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleChocoChip);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleChocoChip);
                itemID++;
            }
            
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(total));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_chocoChipPurchaseActionPerformed

    private int smCookiesNCreamQty = 0;
    private int mdCookiesNCreamQty = 0;
    private int lgCookiesNCreamQty = 0;   
    private void cookiesNCreamPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cookiesNCreamPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Cookies and Cream";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smCookiesNCream.isSelected() || mdCookiesNCream.isSelected() || lgCookiesNCream.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {               
            if (smCookiesNCream.isSelected()) {
                sizeName = smCookiesNCream.getText();
                smCookiesNCreamQty += (int) jSpinnerCookiesNCream.getValue();
                quantity = smCookiesNCreamQty;
            } else if (mdCookiesNCream.isSelected()) {
                sizeName = mdCookiesNCream.getText();
                mdCookiesNCreamQty += (int) jSpinnerCookiesNCream.getValue();
                quantity = mdCookiesNCreamQty;
            } else if (lgCookiesNCream.isSelected()) {
                sizeName = lgCookiesNCream.getText();
                lgCookiesNCreamQty += (int) jSpinnerCookiesNCream.getValue();
                quantity = lgCookiesNCreamQty;
            }
            Double unitPrice = Double.parseDouble(cookiesNCreamPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleCookiesNCream = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleCookiesNCream);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleCookiesNCream);
                itemID++;
            }

            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));           
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(total));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_cookiesNCreamPurchaseActionPerformed
    
    private int smWhiteMochaQty = 0;
    private int mdWhiteMochaQty = 0;
    private int lgWhiteMochaQty = 0;
    private void whiteMochaPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteMochaPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "White Mocha";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smWhiteMocha.isSelected() || mdWhiteMocha.isSelected() || lgWhiteMocha.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {
            if (smWhiteMocha.isSelected()) {
                sizeName = smWhiteMocha.getText();
                smWhiteMochaQty += (int) jSpinnerWhiteMocha.getValue();
                quantity = smWhiteMochaQty;
            } else if (mdWhiteMocha.isSelected()) {
                sizeName = mdWhiteMocha.getText();
                mdWhiteMochaQty += (int) jSpinnerWhiteMocha.getValue();
                quantity = mdWhiteMochaQty;
            } else if (lgWhiteMocha.isSelected()) {
                sizeName = lgWhiteMocha.getText();
                lgWhiteMochaQty += (int) jSpinnerWhiteMocha.getValue();
                quantity = lgWhiteMochaQty;
            }
            Double unitPrice = Double.parseDouble(whiteMochaPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleWhiteMocha = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleWhiteMocha);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleWhiteMocha);
                itemID++;
            }
   
            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(total));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_whiteMochaPurchaseActionPerformed
    
    private int smToffeeNutQty = 0;
    private int mdToffeeNutQty = 0;
    private int lgToffeeNutQty = 0;
    private void toffeeNutPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toffeeNutPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Toffee Nut";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smToffeeNut.isSelected() || mdToffeeNut.isSelected() || lgToffeeNut.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {                
            if (smToffeeNut.isSelected()) {
                sizeName = smToffeeNut.getText();
                smToffeeNutQty += (int) jSpinnerToffeeNut.getValue();
                quantity = smToffeeNutQty;
            } else if (mdToffeeNut.isSelected()) {
                sizeName = mdToffeeNut.getText();
                mdToffeeNutQty += (int) jSpinnerToffeeNut.getValue();
                quantity = mdToffeeNutQty;
            } else if (lgToffeeNut.isSelected()) {
                sizeName = lgToffeeNut.getText();
                lgToffeeNutQty += (int) jSpinnerToffeeNut.getValue();
                quantity = lgToffeeNutQty;
            }
            Double unitPrice = Double.parseDouble(toffeeNutPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleToffeeNut = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleToffeeNut);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleToffeeNut);
                itemID++;
            }

            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal)); 
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(total));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_toffeeNutPurchaseActionPerformed
    
    private int smDarkChocoQty = 0;
    private int mdDarkChocoQty = 0;
    private int lgDarkChocoQty = 0;
    private void darkChocoPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkChocoPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Dark Chocolate";
        String sizeName = "";
        boolean isSizeSelected = false;
        int quantity = 0;
        if (smDarkChoco.isSelected() || mdDarkChoco.isSelected() || lgDarkChoco.isSelected()) {
            isSizeSelected = true;
        }
        
        if(isSizeSelected) {                
            if (smDarkChoco.isSelected()) {
                sizeName = smDarkChoco.getText();
                smDarkChocoQty += (int) jSpinnerDarkChoco.getValue();
                quantity = smDarkChocoQty;
            } else if (mdDarkChoco.isSelected()) {
                sizeName = mdDarkChoco.getText();
                mdDarkChocoQty += (int) jSpinnerDarkChoco.getValue();
                quantity = mdDarkChocoQty;
            } else if (lgDarkChoco.isSelected()) {
                sizeName = lgDarkChoco.getText();
                lgDarkChocoQty += (int) jSpinnerDarkChoco.getValue();
                quantity = lgDarkChocoQty;
            }
            Double unitPrice = Double.parseDouble(darkChocoPrice.getText());
            Double amount = unitPrice * quantity;
              
            Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
            DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
            
            Sale saleDarkChoco = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
            if(tblModel.getRowCount() == 0) {
                tblModel.addRow(addRow);
                sales.add(saleDarkChoco);
                itemID++;
            }
            
            boolean found = false;
            for(int i = 0; i < tblModel.getRowCount(); i++) {
                if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                    found = true;
                    tblModel.setValueAt(quantity, i, 2);
                    tblModel.setValueAt(amount, i, 5);
                    sales.get(i).setQuantity(quantity);
                    sales.get(i).setAmount(amount);
                }
            }
            if(!found) {
                tblModel.addRow(addRow);
                sales.add(saleDarkChoco);
                itemID++;
            }

            subTotal = 0.0;
            for(Sale sale : sales) {
                subTotal += sale.getAmount();
            }
            subTotalTextFld.setText(String.valueOf(subTotal));           
            tax = 0.12 * subTotal;
            total = subTotal + tax;
            taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
            totalTextFld.setText(String.valueOf(total));
        } else {
            JOptionPane.showMessageDialog(this, "Size for the "+ prodName + " is not selected!");
        }
    }//GEN-LAST:event_darkChocoPurchaseActionPerformed
    
    private int painAuChocolatQty = 0;
    private void painAuChocolatPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_painAuChocolatPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Pain Au Chocolat";
        String sizeName = "Normal";
        Double unitPrice = Double.parseDouble(painAuChocolatPrice.getText());
        painAuChocolatQty += (int) jSpinnerPainAuChocolat.getValue();
        
        int quantity = painAuChocolatQty;
        Double amount = unitPrice * quantity;
        
        Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
        
        DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
        
        Sale salePainAuChocolat = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
        if(tblModel.getRowCount() == 0) {
            tblModel.addRow(addRow);
            sales.add(salePainAuChocolat);
            itemID++;
        }

        boolean found = false;
        for(int i = 0; i < tblModel.getRowCount(); i++) {
            if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                found = true;
                tblModel.setValueAt(quantity, i, 2);
                tblModel.setValueAt(amount, i, 5);
                sales.get(i).setQuantity(quantity);
                sales.get(i).setAmount(amount);
            }
        }
        if(!found) {
            tblModel.addRow(addRow);
            sales.add(salePainAuChocolat);
            itemID++;
        }
        
        subTotal = 0.0;
        for(Sale sale : sales) {
            subTotal += sale.getAmount();
        }
        subTotalTextFld.setText(String.valueOf(subTotal));
        tax = 0.12 * subTotal;
        total = subTotal + tax;
        taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
        totalTextFld.setText(String.valueOf(total));
    }//GEN-LAST:event_painAuChocolatPurchaseActionPerformed
    
    private int macaronQty = 0;
    private void macaronPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macaronPurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Macaron";
        String sizeName = "Normal";
        Double unitPrice = Double.parseDouble(macaronPrice.getText());
        macaronQty += (int) jSpinnerMacaron.getValue();
        
        int quantity = macaronQty;
        Double amount = unitPrice * quantity;
        
        Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
        
        DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
        
        Sale saleMacaron = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
        if(tblModel.getRowCount() == 0) {
            tblModel.addRow(addRow);
            sales.add(saleMacaron);
            itemID++;
        }

        boolean found = false;
        for(int i = 0; i < tblModel.getRowCount(); i++) {
            if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                found = true;
                tblModel.setValueAt(quantity, i, 2);
                tblModel.setValueAt(amount, i, 5);
                sales.get(i).setQuantity(quantity);
                sales.get(i).setAmount(amount);
            }
        }
        if(!found) {
            tblModel.addRow(addRow);
            sales.add(saleMacaron);
            itemID++;
        }
        
        subTotal = 0.0;
        for(Sale sale : sales) {
            subTotal += sale.getAmount();
        }
        subTotalTextFld.setText(String.valueOf(subTotal));
        tax = 0.12 * subTotal;
        total = subTotal + tax;
        taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
        totalTextFld.setText(String.valueOf(total));
    }//GEN-LAST:event_macaronPurchaseActionPerformed
    
    private int blueberryCheesecakeQty = 0;
    private void blueberryCheesecakePurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueberryCheesecakePurchaseActionPerformed
        // TODO add your handling code here:
        String prodName = "Blueberry Cheesecake";
        String sizeName = "Normal";
        Double unitPrice = Double.parseDouble(blueberryCheesecakePrice.getText());
        blueberryCheesecakeQty += (int) jSpinnerBlueberryCheesecake.getValue();
        
        int quantity = blueberryCheesecakeQty;
        Double amount = unitPrice * quantity;
        
        Object[] addRow = {itemID, prodName, quantity, sizeName, unitPrice, amount};
        
        DefaultTableModel tblModel = (DefaultTableModel) orderListTbl.getModel();
        
        Sale saleBlueberryCheesecake = new Sale(invoiceID, itemID, prodName, sizeName, unitPrice, quantity, amount);
            
        if(tblModel.getRowCount() == 0) {
            tblModel.addRow(addRow);
            sales.add(saleBlueberryCheesecake);
            itemID++;
        }

        boolean found = false;
        for(int i = 0; i < tblModel.getRowCount(); i++) {
            if(prodName.equals(tblModel.getValueAt(i, 1)) && sizeName.equals(tblModel.getValueAt(i, 3))) {
                found = true;
                tblModel.setValueAt(quantity, i, 2);
                tblModel.setValueAt(amount, i, 5);
                sales.get(i).setQuantity(quantity);
                sales.get(i).setAmount(amount);
            }
        }
        if(!found) {
            tblModel.addRow(addRow);
            sales.add(saleBlueberryCheesecake);
            itemID++;
        }
        
        subTotal = 0.0;
        for(Sale sale : sales) {
            subTotal += sale.getAmount();
        }
        subTotalTextFld.setText(String.valueOf(subTotal));
        tax = 0.12 * subTotal;
        total = subTotal + tax;
        taxTextFld.setText(String.valueOf(Math.round(tax * 100.0) / 100.0));
        totalTextFld.setText(String.valueOf(total));
    }//GEN-LAST:event_blueberryCheesecakePurchaseActionPerformed

    private void hazelnutPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hazelnutPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hazelnutPriceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(coffeeshop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(coffeeshop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(coffeeshop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(coffeeshop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }
        /* Create and display the form */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup americano;
    private javax.swing.JLabel americanoHeader;
    private javax.swing.JPanel americanoPanel;
    private javax.swing.JTextField americanoPrice;
    private javax.swing.JLabel americanoPriceLbl;
    private javax.swing.JButton americanoPurchase;
    private javax.swing.JLabel americanoQtyLbl;
    private javax.swing.JLabel americanoSizeLbl;
    private javax.swing.JLabel blueberryCheesecakeHeader;
    private javax.swing.JPanel blueberryCheesecakePanel;
    private javax.swing.JTextField blueberryCheesecakePrice;
    private javax.swing.JLabel blueberryCheesecakePriceLbl;
    private javax.swing.JButton blueberryCheesecakePurchase;
    private javax.swing.JLabel blueberryCheesecakeQtyLbl;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnUpdateOrder;
    private javax.swing.ButtonGroup cappucino;
    private javax.swing.JLabel cappucinoHeader;
    private javax.swing.JPanel cappucinoPanel;
    private javax.swing.JTextField cappucinoPrice;
    private javax.swing.JLabel cappucinoPriceLbl;
    private javax.swing.JButton cappucinoPurchase;
    private javax.swing.JLabel cappucinoQtyLbl;
    private javax.swing.JLabel cappucinoSizeLbl;
    private javax.swing.JLabel cashLbl;
    private javax.swing.JTextField cashTextFld;
    private javax.swing.JLabel changeLbl;
    private javax.swing.JTextField changeTextFld;
    private javax.swing.ButtonGroup chocoChip;
    private javax.swing.JLabel chocoChipHeader;
    private javax.swing.JPanel chocoChipPanel;
    private javax.swing.JTextField chocoChipPrice;
    private javax.swing.JLabel chocoChipPriceLbl;
    private javax.swing.JButton chocoChipPurchase;
    private javax.swing.JLabel chocoChipQtyLbl;
    private javax.swing.JLabel chocoChipSizeLbl;
    private javax.swing.JLabel coffeeLbl;
    private javax.swing.ButtonGroup cookiesNCream;
    private javax.swing.JLabel cookiesNCreamHeader;
    private javax.swing.JPanel cookiesNCreamPanel;
    private javax.swing.JTextField cookiesNCreamPrice;
    private javax.swing.JLabel cookiesNCreamPriceLbl;
    private javax.swing.JButton cookiesNCreamPurchase;
    private javax.swing.JLabel cookiesNCreamQtyLbl;
    private javax.swing.JLabel cookiesNCreamSizeLbl;
    private javax.swing.JPanel customerOptions;
    private javax.swing.ButtonGroup darkChoco;
    private javax.swing.JLabel darkChocoHeader;
    private javax.swing.JPanel darkChocoPanel;
    private javax.swing.JTextField darkChocoPrice;
    private javax.swing.JLabel darkChocoPriceLbl;
    private javax.swing.JButton darkChocoPurchase;
    private javax.swing.JLabel darkChocoQtyLbl;
    private javax.swing.JLabel darkChocoSizeLbl;
    private javax.swing.JLabel frappeLbl;
    private javax.swing.ButtonGroup hazelnut;
    private javax.swing.JLabel hazelnutHeader;
    private javax.swing.JPanel hazelnutPanel;
    private javax.swing.JTextField hazelnutPrice;
    private javax.swing.JLabel hazelnutPriceLbl;
    private javax.swing.JButton hazelnutPurchase;
    private javax.swing.JLabel hazelnutQtyLbl;
    private javax.swing.JLabel hazelnutSizeLbl;
    private javax.swing.JLabel iceBlendedLbl;
    private javax.swing.JScrollPane invoicePanel;
    private javax.swing.JTextArea invoiceTextArea;
    private javax.swing.JButton jButtonPay;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JSpinner jSpinnerAmericano;
    private javax.swing.JSpinner jSpinnerBlueberryCheesecake;
    private javax.swing.JSpinner jSpinnerCappucino;
    private javax.swing.JSpinner jSpinnerChocoChip;
    private javax.swing.JSpinner jSpinnerCookiesNCream;
    private javax.swing.JSpinner jSpinnerDarkChoco;
    private javax.swing.JSpinner jSpinnerHazelnut;
    private javax.swing.JSpinner jSpinnerLatte;
    private javax.swing.JSpinner jSpinnerMacaron;
    private javax.swing.JSpinner jSpinnerPainAuChocolat;
    private javax.swing.JSpinner jSpinnerToffeeNut;
    private javax.swing.JSpinner jSpinnerWhiteMocha;
    private javax.swing.ButtonGroup latte;
    private javax.swing.JLabel latteHeader;
    private javax.swing.JPanel lattePanel;
    private javax.swing.JTextField lattePrice;
    private javax.swing.JLabel lattePriceLbl;
    private javax.swing.JButton lattePurchase;
    private javax.swing.JLabel latteQtyLbl;
    private javax.swing.JLabel latteSizeLbl;
    private javax.swing.JRadioButton lgAmericano;
    private javax.swing.JRadioButton lgCappucino;
    private javax.swing.JRadioButton lgChocoChip;
    private javax.swing.JRadioButton lgCookiesNCream;
    private javax.swing.JRadioButton lgDarkChoco;
    private javax.swing.JRadioButton lgHazelnut;
    private javax.swing.JRadioButton lgLatte;
    private javax.swing.JRadioButton lgToffeeNut;
    private javax.swing.JRadioButton lgWhiteMocha;
    private javax.swing.JLabel macaronHeader;
    private javax.swing.JPanel macaronPanel;
    private javax.swing.JTextField macaronPrice;
    private javax.swing.JLabel macaronPriceLbl;
    private javax.swing.JButton macaronPurchase;
    private javax.swing.JLabel macaronQtyLbl;
    private javax.swing.JRadioButton mdAmericano;
    private javax.swing.JRadioButton mdCappucino;
    private javax.swing.JRadioButton mdChocoChip;
    private javax.swing.JRadioButton mdCookiesNCream;
    private javax.swing.JRadioButton mdDarkChoco;
    private javax.swing.JRadioButton mdHazelnut;
    private javax.swing.JRadioButton mdLatte;
    private javax.swing.JRadioButton mdToffeeNut;
    private javax.swing.JRadioButton mdWhiteMocha;
    private javax.swing.JLabel menuItemsLbl;
    private javax.swing.JPanel menuItemsPnl;
    private javax.swing.JScrollPane orderListPanel;
    private javax.swing.JTable orderListTbl;
    private javax.swing.JLabel painAuChocolatHeader;
    private javax.swing.JPanel painAuChocolatPanel;
    private javax.swing.JTextField painAuChocolatPrice;
    private javax.swing.JLabel painAuChocolatPriceLbl;
    private javax.swing.JButton painAuChocolatPurchase;
    private javax.swing.JLabel painAuChocolatQtyLbl;
    private javax.swing.JLabel pastryLbl;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JLabel shopNameLbl;
    private javax.swing.JPanel shopNamePnl;
    private javax.swing.JRadioButton smAmericano;
    private javax.swing.JRadioButton smCappucino;
    private javax.swing.JRadioButton smChocoChip;
    private javax.swing.JRadioButton smCookiesNCream;
    private javax.swing.JRadioButton smDarkChoco;
    private javax.swing.JRadioButton smHazelnut;
    private javax.swing.JRadioButton smLatte;
    private javax.swing.JRadioButton smToffeeNut;
    private javax.swing.JRadioButton smWhiteMocha;
    private javax.swing.JLabel subTotalLbl;
    private javax.swing.JTextField subTotalTextFld;
    private javax.swing.JLabel taxLbl;
    private javax.swing.JTextField taxTextFld;
    private javax.swing.ButtonGroup toffeeNut;
    private javax.swing.JLabel toffeeNutHeader;
    private javax.swing.JPanel toffeeNutPanel;
    private javax.swing.JTextField toffeeNutPrice;
    private javax.swing.JLabel toffeeNutPriceLbl;
    private javax.swing.JButton toffeeNutPurchase;
    private javax.swing.JLabel toffeeNutQtyLbl;
    private javax.swing.JLabel toffeeNutSizeLbl;
    private javax.swing.JLabel totalLbl;
    private javax.swing.JTextField totalTextFld;
    private javax.swing.ButtonGroup whiteMocha;
    private javax.swing.JLabel whiteMochaHeader;
    private javax.swing.JPanel whiteMochaPanel;
    private javax.swing.JTextField whiteMochaPrice;
    private javax.swing.JLabel whiteMochaPriceLbl;
    private javax.swing.JButton whiteMochaPurchase;
    private javax.swing.JLabel whiteMochaQtyLbl;
    private javax.swing.JLabel whiteMochaSizeLbl;
    // End of variables declaration//GEN-END:variables
}
